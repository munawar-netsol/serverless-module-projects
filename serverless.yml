service: projects
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'
  environment:
    tableName: ${self:custom.tableName}
    chatAppTableName: ${self:custom.chatAppTableName}
    bucketName: ${self:custom.bucketName}
    signupTableName: ${self:custom.signupTableName}
custom:
  tableName: player-point-aws
  chatAppTableName: chat-app-table
  signupTableName: sign-up-table
  bucketName: serverlessmoduleprojectbucket1
  dynamodb:
    stages:
      - dev
    start:
      port: 8021
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations/player-point-local.json
  scripts:
    hooks:
     'aws:common:validate:validate' : jest --runInBand --setupFiles ./jest/setEnvVars  # When AWS is validate cloudformation 
  s3:
    host: localhost
    directory: tmp
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-scripts
  - serverless-s3-local
  - serverless-webpack
  - serverless-step-functions
package:
  - individually: true
  
functions:
  hello:
    handler: handler.hello
  createPlayerScore:
    handler: restapis/createPlayerScore.handler
    events:
      - http:
          path: put-player-score/{ID}
          method: post
          cors: true
  deletePlayerScore:
    handler: restapis/deletePlayerScore.handler
    events:
      - http:
          path: delete-player-score/{ID}
          method: delete
          cors: true
  getPlayerScore:
    handler: restapis/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: get
          cors: true
  queryPlayerScore:
    handler: restapis/queryPlayerScore.handler
    events:
      - http:
          path: query-player-score/{ID}
          method: get
          cors: true
  putObject:
    handler: restapis/putObject.handler
    events:
      - http:
          path: put-object/{fileName}
          method: post
          cors: true
  getPlayerScoreAuthorized:
    handler: restapis/getPlayerScoreAuthorized.handler
    events:
      - http:
          path: get-player-score-auth/{ID}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS # TOKEN or REQUEST or COGNITO_USER_POOLS, same as AWS Cloudformation documentation
            authorizerId:
              Ref: ApiGatewayAuthorizer # or hard-code Authorizer ID
            scopes:
              email
  websocket-connect:
    handler: chatserver/connect.handler
    events:
      - websocket:
          route: $connect
  websocket-disconnect:
    handler: chatserver/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  websocket-message:
    handler: chatserver/messages.handler
    events:
      - websocket:
          route: messages
  websocket-default:
    handler: chatserver/default.handler
    events:
      - websocket:
          route: $default
  addSignUp:
    handler: stepfunctions/addSignUp.handler
  getSignUp:
    handler: stepfunctions/getSignUp.handler
  sendReminderEmail:
    handler: stepfunctions/sendReminderEmail.handler

stepFunctions:
  validate: true
  stateMachines:
    reminderEmail:
      name: reminderEmail
      events:
        - http:
            path: send-reminder-email
            method: post
            cors: true
      definition: ${file(./stepFunctions.yml)}
resources:
  Resources:
    MyAWSS3Bucket:
      Type: AWS::S3::Bucket
      Properties:        
        BucketName: ${self:custom.bucketName}     
    MyAWSS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref MyAWSS3Bucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref MyAWSS3Bucket
                  - /*
              Principal: '*'

    ChatAppDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.chatAppTableName}
        AttributeDefinitions:
          - AttributeName: ConnectionId
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: game-index
            KeySchema:
                - AttributeName: game
                  KeyType: HASH
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    SignupTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.signupTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    MyAWSCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-cloudform-user-pool
        Policies:
            PasswordPolicy:
                RequireNumbers: true
                MinimumLength: 8
                TemporaryPasswordValidityDays: 123
                RequireUppercase: true
                RequireLowercase: true
                RequireSymbols: true
        UsernameAttributes:
            - email
        AutoVerifiedAttributes:
            - email

    MyAWSCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: my-cloudform-user-pool-client
        UserPoolId: !Ref MyAWSCognitoUserPool 
        AllowedOAuthFlows: 
          - code
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes: 
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        CallbackURLs: 
          - https://example.com/calback
        LogoutURLs: 
          - https://example.com/signout
        SupportedIdentityProviders: 
          - COGNITO

    myuserpooldomain: 
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: !Ref MyAWSCognitoUserPool
        Domain: "mydomain123401"

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          #- arn:aws:cognito-idp:us-east-1:636770137098:userpool/us-east-1_Si8UJdIyc
          - !Join
                - ''
                - - 'arn:aws:cognito-idp:us-east-1:636770137098:'
                  - userpool/
                  - !Ref MyAWSCognitoUserPool